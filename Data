import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta

# --------------------------
# PARAMETERS
# --------------------------
NUM_PARTS = 200
NUM_SUPPLIERS = 50
NUM_DAYS = 365 * 3
START_DATE = datetime(2020, 1, 1)

# --------------------------
# SUPPLIERS
# --------------------------
suppliers = []
for i in range(NUM_SUPPLIERS):
    suppliers.append({
        "supplier_id": f"S{i+1:03d}",
        "name": f"Supplier_{i+1}",
        "lead_time_days": np.random.randint(5, 30),
        "rating": round(np.random.uniform(3.0, 5.0), 2)
    })
suppliers_df = pd.DataFrame(suppliers)

# --------------------------
# INVENTORY
# --------------------------
inventory = []
for i in range(NUM_PARTS):
    supplier = random.choice(suppliers)
    inventory.append({
        "part_id": f"P{i+1:04d}",
        "description": f"Part_{i+1}",
        "category": random.choice(["Engine", "Chassis", "Electronics", "Interior", "Wheels"]),
        "on_hand": np.random.randint(100, 1000),
        "reorder_point": np.random.randint(200, 600),
        "MOQ": np.random.randint(50, 200),
        "supplier_id": supplier["supplier_id"]
    })
inventory_df = pd.DataFrame(inventory)

# --------------------------
# USAGE HISTORY
# --------------------------
usage = []
for day in range(NUM_DAYS):
    date = START_DATE + timedelta(days=day)
    for part in inventory:
        demand = np.random.poisson(lam=np.random.randint(0, 5))
        if demand > 0:
            usage.append({
                "date": date,
                "part_id": part["part_id"],
                "demand_qty": demand
            })
usage_df = pd.DataFrame(usage)

# --------------------------
# PRODUCTION SCHEDULE
# --------------------------
models = ["Sedan", "SUV", "Truck", "EV", "Luxury"]
schedule = []
for day in range(NUM_DAYS):
    date = START_DATE + timedelta(days=day)
    for m in models:
        schedule.append({
            "date": date,
            "car_model": m,
            "planned_qty": np.random.randint(0, 50)
        })
schedule_df = pd.DataFrame(schedule)

# --------------------------
# BOM
# --------------------------
bom = []
for m in models:
    for part in random.sample(list(inventory_df["part_id"]), 50):
        bom.append({
            "car_model": m,
            "part_id": part,
            "qty_per_car": np.random.randint(1, 5)
        })
bom_df = pd.DataFrame(bom)

# --------------------------
# PURCHASE ORDERS
# --------------------------
purchase_orders = []
for i in range(2000):
    part = random.choice(inventory)
    supplier_id = part["supplier_id"]
    po_date = START_DATE + timedelta(days=np.random.randint(0, NUM_DAYS))
    qty = np.random.randint(50, 500)
    purchase_orders.append({
        "po_id": f"PO{i+1:05d}",
        "part_id": part["part_id"],
        "supplier_id": supplier_id,
        "order_date": po_date,
        "qty_ordered": qty,
        "status": random.choice(["Open", "Closed", "In Transit"])
    })
purchase_orders_df = pd.DataFrame(purchase_orders)

# --------------------------
# SAVE DATASETS
# --------------------------
with pd.ExcelWriter("manufacturing_data.xlsx") as writer:
    suppliers_df.to_excel(writer, sheet_name="Suppliers", index=False)
    inventory_df.to_excel(writer, sheet_name="Inventory", index=False)
    usage_df.to_excel(writer, sheet_name="Usage", index=False)
    schedule_df.to_excel(writer, sheet_name="Schedule", index=False)
    bom_df.to_excel(writer, sheet_name="BOM", index=False)
    purchase_orders_df.to_excel(writer, sheet_name="PurchaseOrders", index=False)

print("âœ… Data saved as manufacturing_data.xlsx")

# --------------------------
# QUERY / MERGE LAYER
# --------------------------

# 1. Parts below reorder point (shortages)
def parts_below_reorder(inventory_df):
    return inventory_df[inventory_df["on_hand"] < inventory_df["reorder_point"]]

# 2. Top suppliers causing shortages
def supplier_shortages(inventory_df, suppliers_df):
    shortages = parts_below_reorder(inventory_df)
    return shortages.merge(suppliers_df, on="supplier_id")[["supplier_id", "name"]].value_counts().head(10)

# 3. Forecast demand for next 7 days (simple avg)
def forecast_demand(usage_df):
    recent = usage_df[usage_df["date"] > usage_df["date"].max() - timedelta(days=30)]
    return recent.groupby("part_id")["demand_qty"].mean().reset_index(name="avg_daily_demand")

# 4. Check stockout risk in next 7 days
def stockout_risk(inventory_df, forecast_df):
    merged = inventory_df.merge(forecast_df, on="part_id", how="left").fillna(0)
    merged["expected_demand_7d"] = merged["avg_daily_demand"] * 7
    merged["risk_of_stockout"] = merged["on_hand"] < merged["expected_demand_7d"]
    return merged[merged["risk_of_stockout"]][["part_id", "description", "on_hand", "expected_demand_7d"]]

# Example usage
print("\n--- Shortages ---")
print(parts_below_reorder(inventory_df).head())

print("\n--- Supplier Shortages ---")
print(supplier_shortages(inventory_df, suppliers_df))

print("\n--- Forecast Demand ---")
forecast_df = forecast_demand(usage_df)
print(forecast_df.head())

print("\n--- Stockout Risk ---")
print(stockout_risk(inventory_df, forecast_df).head())

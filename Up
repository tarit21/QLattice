
import streamlit as st
import pandas as pd
import requests

# --------------------------
# CONFIGURATION
# --------------------------
EXCEL_FILE = "manufacturing_data.xlsx"

# üîß Hackathon LLM config
BASE_URL = "https://genailab.tcs.in/"
MODEL = "azure_ai/genailab-maas-DeepSeek-V3-0324"
DEEPSEEK_API_KEY = "sk-xxx"   # Replace with your hackathon key

# --------------------------
# LOAD DATA
# --------------------------
@st.cache_data
def load_data(file):
    xls = pd.ExcelFile(file)
    data = {sheet: pd.read_excel(xls, sheet) for sheet in xls.sheet_names}
    return data

# --------------------------
# LLM ASK FUNCTION (with context)
# --------------------------
def ask_llm(question, api_key, context=""):
    url = f"{BASE_URL}/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": "You are an assistant that answers ONLY using the provided manufacturing data."},
            {"role": "user", "content": f"Data context:\n{context}"},
            {"role": "user", "content": f"Question: {question}"}
        ],
        "temperature": 0.4
    }

    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30, verify=False)
        response.raise_for_status()
        data = response.json()
        return data["choices"][0]["message"]["content"], data
    except Exception as e:
        return f"‚ùå Error: {e}", None

# --------------------------
# STREAMLIT UI
# --------------------------
st.set_page_config(page_title="Manufacturing Inventory Agent", layout="wide")
st.title("üè≠ Manufacturing Inventory Query & Restock Suggestion Agent")

# Load data
try:
    data = load_data(EXCEL_FILE)
    st.sidebar.success("‚úÖ Data loaded successfully")
except Exception as e:
    st.sidebar.error(f"‚ùå Error loading data: {e}")
    st.stop()

# Sidebar navigation
st.sidebar.header("Navigation")
page = st.sidebar.radio("Go to:", ["Inventory Dashboard", "Ask LLM"])

# --------------------------
# INVENTORY DASHBOARD
# --------------------------
if page == "Inventory Dashboard":
    st.header("üìä Inventory Dashboard")

    if "Inventory" in data:
        st.subheader("Current Inventory")
        st.dataframe(data["Inventory"].head(20))

        low_stock = data["Inventory"][data["Inventory"]["StockQuantity"] < 50]
        if not low_stock.empty:
            st.warning("‚ö†Ô∏è Low Stock Items:")
            st.dataframe(low_stock)

    if "Usage" in data:
        st.subheader("Historical Usage Trends")
        usage_summary = data["Usage"].groupby("PartID")["QuantityUsed"].sum().reset_index()
        st.bar_chart(usage_summary.set_index("PartID"))

    if "PurchaseOrders" in data:
        st.subheader("Recent Purchase Orders")
        st.dataframe(data["PurchaseOrders"].tail(10))

# --------------------------
# LLM Q&A SECTION
# --------------------------
elif page == "Ask LLM":
    st.header("üîÆ Ask the LLM about Manufacturing Data")

    user_q = st.text_area("Type your question:",
                          placeholder="e.g., Which parts are at risk of stockout next week?")

    if st.button("Ask LLM"):
        if not DEEPSEEK_API_KEY or DEEPSEEK_API_KEY.startswith("sk-xxx"):
            st.error("‚ö†Ô∏è Please set a valid DEEPSEEK_API_KEY in code.")
        else:
            # üëâ Basic RAG: choose relevant context
            context = ""
            if "Inventory" in data:
                context = data["Inventory"].head(50).to_json(orient="records")

            answer, raw = ask_llm(user_q, DEEPSEEK_API_KEY, context=context)
            st.success(answer)

            with st.expander("üîé Debug: Raw API Response"):
                st.json(raw)

    st.subheader("Quick Ask")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Which items need restocking soon?"):
            low_stock = data["Inventory"][data["Inventory"]["StockQuantity"] < 50]
            context = low_stock.to_json(orient="records") if not low_stock.empty else "No low stock"
            answer, _ = ask_llm("Which items need restocking soon?", DEEPSEEK_API_KEY, context)
            st.info(answer)

    with col2:
        if st.button("Suggest suppliers for critical parts"):
            if "PurchaseOrders" in data:
                context = data["PurchaseOrders"].tail(20).to_json(orient="records")
            else:
                context = "No supplier data available"
            answer, _ = ask_llm("Suggest suppliers for critical parts", DEEPSEEK_API_KEY, context)
            st.info(answer)

